From f51769792a46d5ecbf79376a5c6c0e95b9bed686 Mon Sep 17 00:00:00 2001
From: Max Kellermann <max.kellermann@gmail.com>
Date: Fri, 10 Feb 2017 23:37:09 +0100
Subject: [PATCH 1/3] configure.ac: remove GLIB_CFLAGS and GLIB_LIBS

What is this?  Maybe fallout from a copy'n'paste orgy?
---
 configure.ac | 5 +----
 1 file changed, 1 insertion(+), 4 deletions(-)

diff --git a/configure.ac b/configure.ac
index de4d611..86cd902 100644
--- a/configure.ac
+++ b/configure.ac
@@ -42,10 +42,8 @@ AC_ARG_ENABLE([examples],
 # We need popt to compile the examples
 if test x$ENABLE_EXAMPLES = xyes; then
 AC_MSG_CHECKING(whether libpopt is available)
-ac_save_CFLAGS="$CFLAGS"
 ac_save_LIBS="$LIBS"
-CFLAGS="$CFLAGS $GLIB_CFLAGS"
-LIBS="$GLIB_LIBS $LIBS -lpopt"
+LIBS="$LIBS -lpopt"
 AC_TRY_RUN([
 /*
  * Just see if we can compile/link with popt
@@ -64,7 +62,6 @@ int main(int argc, const char *argv[])
 ], ac_cv_have_popt=yes, ac_cv_have_popt=no,
    [echo $ac_n "compile with POPT. Assuming OK... $ac_c"
     ac_cv_have_popt=yes])
-CFLAGS="$ac_save_CFLAGS"
 LIBS="$ac_save_LIBS"
 if test "$ac_cv_have_popt" = yes ; then
   AC_MSG_RESULT(yes)

From 3ef8675c6fbd2e9aa681c5192ab2bf551d308eff Mon Sep 17 00:00:00 2001
From: Max Kellermann <max.kellermann@gmail.com>
Date: Fri, 10 Feb 2017 23:34:22 +0100
Subject: [PATCH 2/3] configure.ac: avoid AC_TRY_RUN

Those tests are compile-time and link-time checks, and running the
resulting programs is not needed or even helpful.  This fixes the
Windows cross-build, which previously failed because SO_BINDTODEVICE
was assumed to be available.
---
 configure.ac | 32 +++++++-------------------------
 1 file changed, 7 insertions(+), 25 deletions(-)

diff --git a/configure.ac b/configure.ac
index 86cd902..f002cd6 100644
--- a/configure.ac
+++ b/configure.ac
@@ -44,24 +44,17 @@ if test x$ENABLE_EXAMPLES = xyes; then
 AC_MSG_CHECKING(whether libpopt is available)
 ac_save_LIBS="$LIBS"
 LIBS="$LIBS -lpopt"
-AC_TRY_RUN([
+AC_TRY_LINK([#include <popt.h>], [
 /*
  * Just see if we can compile/link with popt
  */
-#include <popt.h>
-
-int main(int argc, const char *argv[])
-{
+	int _argc;
+	char **_argv;
 	struct poptOption popt_options[] = {
 		POPT_TABLEEND
 	};
-	poptGetContext(argv[0], argc, argv, popt_options, POPT_CONTEXT_KEEP_FIRST);
-
-	return 0;
-}
-], ac_cv_have_popt=yes, ac_cv_have_popt=no,
-   [echo $ac_n "compile with POPT. Assuming OK... $ac_c"
-    ac_cv_have_popt=yes])
+	poptGetContext(_argv[0], _argc, _argv, popt_options, POPT_CONTEXT_KEEP_FIRST);
+], ac_cv_have_popt=yes, ac_cv_have_popt=no)
 LIBS="$ac_save_LIBS"
 if test "$ac_cv_have_popt" = yes ; then
   AC_MSG_RESULT(yes)
@@ -76,20 +69,9 @@ fi
 AC_SUBST(MAYBE_EXAMPLES)
 
 AC_MSG_CHECKING(whether SO_BINDTODEVICE is available)
-AC_TRY_RUN([
-/*
- * Just see if we can compile with SO_BINDTODEVICE
- */
-#include <net/if.h>
-
-int main(int argc, const char *argv[])
-{
+AC_TRY_COMPILE([#include <net/if.h>], [
         int i = SO_BINDTODEVICE;
-	return 0;
-}
-], ac_cv_have_so_bindtodevice=yes, ac_cv_have_so_bindtodevice=no,
-   [echo $ac_n "compile with SO_BINDTODEVICE. Assuming OK... $ac_c"
-    ac_cv_have_so_bindtodevice=yes])
+], ac_cv_have_so_bindtodevice=yes, ac_cv_have_so_bindtodevice=no)
 if test "$ac_cv_have_so_bindtodevice" = yes ; then
   AC_MSG_RESULT(yes)
   AC_DEFINE(HAVE_SO_BINDTODEVICE, 1, [Whether our sockets support SO_BINDTODEVICE])

From 038af3a5ff96b4cbf7ef0653106b0e96e5d6889d Mon Sep 17 00:00:00 2001
From: Max Kellermann <max.kellermann@gmail.com>
Date: Fri, 10 Feb 2017 23:26:09 +0100
Subject: [PATCH 3/3] socket: pass u_long* to ioctlsocket()

See https://msdn.microsoft.com/en-us/library/windows/desktop/ms738573(v=vs.85).aspx
---
 lib/socket.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/lib/socket.c b/lib/socket.c
index b89084d..78e41e5 100644
--- a/lib/socket.c
+++ b/lib/socket.c
@@ -105,7 +105,7 @@ static int set_nonblocking(int fd)
 {
 	int v = 0;
 #if defined(WIN32)
-	long nonblocking=1;
+	u_long nonblocking=1;
 	v = ioctl(fd, FIONBIO, &nonblocking);
 #else
 	v = fcntl(fd, F_GETFL, 0);
